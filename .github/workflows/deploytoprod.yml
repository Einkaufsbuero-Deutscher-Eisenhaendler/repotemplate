name: PROD Workflow

on:
 repository_dispatch:
   types: [prod_trigger]
   
jobs:
  build:

    env:
     SolutionName: ${{ github.event.client_payload.solutionname }}
     prodCS: ${{ secrets.PRODUCTION_CS }}
     testCS: ${{ secrets.BUILD_CS }}

    runs-on: windows-2019

    steps:
    - name: 'clone this repo'
      uses: actions/checkout@v2-beta

#    - name: 'Power ALM Export action Checkout'
#      uses: actions/checkout@v2-beta
#      with:
#        repository: poweralm/export
#        ref: refs/heads/master
#        token: ${{ secrets.PP_ACTION_SEC }}
#        path: .github/export

    - name: 'Power ALM Import action Checkout'
      uses: actions/checkout@v2-beta
      with:
        repository: poweralm/import
        ref: refs/heads/master
        token: ${{ secrets.PP_ACTION_SEC }}
        path: .github/import

       
#    - name: 'Export the Power Solution from UAT Environment'
#      uses: ./.github/export
#      with:
#        connectionString: '${{ env.testCS }}'
#        solutionName: ${{env.SolutionName}}
#        ExportSolutionOutputPath: 'exported_managed'
#        packageType: 'Managed'

    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Required, workflow file name or ID
          workflow: deploytotest.yml



    - name: 'Import the solution to Prod Environment'
      uses: ./.github/import
      with:
        ConnectionString: '${{ env.prodCS }}'
        SolutionFile: '${{env.SolutionName}}\${{env.SolutionName}}_managed.zip'
    
    - name: Set job status
      if: always()
      run: |
        $jobStatus = echo ${{ job.status }}
        $workflow = echo ${{ github.workflow }}
        $branch = echo ${{ env.branchName }}
        $repo = echo ${{ github.repository }}
        $run = echo ${{ github.run_id }}
        $requestId = echo ${{ env.requestId }}
        $status = @{
          'status' = $jobStatus;
          'workflow' = $wokrkflow;
          'run' = $run;
          'requestid' = $requestId
        }
        $jsonString = ConvertTo-Json -InputObject $status
        $jsonString > status.txt

    - name: Update job status
      uses: actions/upload-artifact@v1
      with:
        name: pass_status
        path: status.txt
  
  notify:
    needs: [build]
    if: always()
    env:
      status: ''
    runs-on: ubuntu-latest
    steps:
      
    - name: Download artifact pass_status
      uses: actions/download-artifact@v1
      with:
        name: pass_status

    - name: Check status
      if: always()
      id: check_files
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "pass_status/status.txt"
    
    - name: Reading status
      if: always()
      run: |
        statusText='{"status":"${{ steps.check_files.outputs.files_exists }}", "requestid":"'"${{ github.event.client_payload.requestid }}"'", "run":${{ github.run_id }}, "workflow":"'"${{ github.workflow }}"'"}'
        echo $statusText
        echo "::set-env name=status::$statusText"

    - name: Printing status
      if: always()
      run: |
        echo ${{ env.status }}

    - name: Invoke Notification API
      if: always()
      uses: distributhor/workflow-webhook@v1
      env:
        webhook_url: ${{ github.event.client_payload.webhookurl }}
        webhook_secret: ' dummy '
        data: ${{ env.status }}
